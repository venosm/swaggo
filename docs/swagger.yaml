components:
  schemas:
    main.ChybovaOdpoved:
      properties:
        kod:
          description: HTTP status kód chyby
          example: 400
          type: integer
        zprava:
          description: Popis chyby pro uživatele
          example: Špatný požadavek
          type: string
      type: object
    main.UspesnaOdpoved:
      properties:
        data:
          description: Volitelná data odpovědi
        zprava:
          description: Zpráva o úspěchu operace
          example: Operace proběhla úspěšně
          type: string
      type: object
    main.Uzivatel:
      properties:
        datum_registrace:
          description: Datum a čas registrace
          example: "2023-01-01T00:00:00Z"
          type: string
        email:
          description: Emailová adresa uživatele
          example: jan.novak@example.com
          type: string
        id:
          description: Jedinečný identifikátor uživatele
          example: 1
          type: integer
        je_aktivni:
          description: Indikátor aktivity uživatele
          example: true
          type: boolean
        jmeno:
          description: Celé jméno uživatele
          example: Jan Novák
          type: string
        vek:
          description: Věk uživatele v letech
          example: 25
          maximum: 150
          minimum: 0
          type: integer
      type: object
    main.UzivatelRequest:
      properties:
        email:
          description: Email nového uživatele
          example: jan.novak@example.com
          type: string
        jmeno:
          description: Jméno nového uživatele
          example: Jan Novák
          type: string
        vek:
          description: Věk nového uživatele
          example: 25
          maximum: 150
          minimum: 0
          type: integer
      required:
      - email
      - jmeno
      - vek
      type: object
externalDocs:
  description: OpenAPI Specifikace
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    <details>
      <summary><b><font size="5">Základní aplikační logika</font></b></summary>
      <p>Toto REST API k elektronické komunikaci pro dodavatele s architekturou REST a formátem dat JSON s kódováním UTF8. Autentizace probíhá na základě certifikátu.</p>
    </details>

    <details>
      <summary><b><font size="5">Operace webové služby</font></b></summary>

    ### Zaevidování zprávy zadavateli
    Pro zaevidování zprávy se používá endpoint **POST /servisni/zprava-zadavali**. Očekává požadavek typu `multipart/form-data` se dvěma částmi: `zpravaJson` (JSON s daty zprávy) a volitelnými `prilohy` (soubory s maximální celkovou velikostí 1 GB).

    ### Zaevidování přečtení zprávy zadavali
    Endpoint **POST /servisni/zprava-zadavali/precteni** slouží k zaevidování přečtení zprávy. Přečtení lze zaevidovat pouze u zprávy, která byla zaevidována stejným elektronickým nástrojem.

    ### Detail zprávy zadavateli
    Pro načtení detailu zprávy je k dispozici endpoint **GET /servisni/zprava-zadavali/{id}**, kde `{id}` je UUID zprávy.

    ### Smazání zprávy zadavateli
    Endpoint **DELETE /servisni/zprava-zadavali/{id}** umožňuje smazání zprávy. Smazat lze pouze zprávy, které pocházejí ze stejného elektronického nástroje, který je evidoval.
    </details>

    ---

    <b><font size="5">Seznam změn</font></b>
    ### Aktuální verze

    <details>
      <summary>1.0.0</summary>

    #### Inicializační verze
    - Implementace základních operací pro správu zpráv.
    - Podpora zaevidování zprávy s přílohami.
    - Možnost zaznamenat přečtení zprávy a získat její detail.
    - Funkce pro smazání zprávy s omezením na nástroj, který ji vytvořil.
    </details>
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API pro správu uživatelů
  version: "1.0"
openapi: 3.0.0
paths:
  /uzivatele:
    get:
      description: |-
        Tento endpoint slouží k získání informací o konkrétním uživateli na základě jeho jedinečného ID.

        ### Použití

        Odešlete GET požadavek na `/uzivatele/{id}` kde `{id}` je číselný identifikátor uživatele.

        ### Návratové hodnoty

        - **200 OK**: Uživatel byl nalezen a jeho data jsou vrácena
        - **404 Not Found**: Uživatel s daným ID neexistuje
        - **500 Internal Server Error**: Chyba serveru

        ### Bezpečnost

        Tento endpoint vyžaduje platný autentifikační token v Authorization hlavičce.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.Uzivatel'
          description: Konkrétní uživatel
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.ChybovaOdpoved'
          description: Uživatel nenalezen
      summary: Získej uživatele
      tags:
      - uzivatele
    post:
      description: Vytvoří nového uživatele v systému
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/main.UzivatelRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/main.UspesnaOdpoved'
                - properties:
                    data:
                      $ref: '#/components/schemas/main.Uzivatel'
                  type: object
          description: Uživatel byl úspěšně vytvořen
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.ChybovaOdpoved'
          description: Špatný požadavek
      summary: Vytvoř nového uživatele
      tags:
      - uzivatele
  /uzivatele/{id}:
    get:
      description: |-
        Tento endpoint slouží k získání informací o konkrétním uživateli na základě jeho jedinečného ID.

        ### Použití

        Odešlete GET požadavek na `/uzivatele/{id}` kde `{id}` je číselný identifikátor uživatele.

        ### Návratové hodnoty

        - **200 OK**: Uživatel byl nalezen a jeho data jsou vrácena
        - **404 Not Found**: Uživatel s daným ID neexistuje
        - **500 Internal Server Error**: Chyba serveru

        ### Bezpečnost

        Tento endpoint vyžaduje platný autentifikační token v Authorization hlavičce.
      parameters:
      - description: ID uživatele
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.Uzivatel'
          description: Konkrétní uživatel
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/main.ChybovaOdpoved'
          description: Uživatel nenalezen
      summary: Získej uživatele
      tags:
      - uzivatele
servers:
- url: http://localhost:8080/api/v1
